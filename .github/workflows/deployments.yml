--- # Time-stamp: <2022-09-17 20:19:43>

name: 10 Manual Deployment

'on':
  workflow_dispatch:
    inputs:
      deployment_target:
        description: Deployment targets (choose one)
        required: true
        default: deploy-k8s-dev
        type: choice
        options:
          - deploy-k8s-dev
          - deploy-k8s-test
          - deploy-k8s-prod
      git_ref:
        description: Git ref (optional) # The branch, tag or SHA to checkout
        required: false

jobs:
  helper:
    uses: ./.github/workflows/migration-helper01.yml
  deploy:
    name: '${{ github.event.inputs.deployment_target }}'
    runs-on: ubuntu-latest
    needs: helper
    steps:
      - name: Cloning repository (HEAD)
        uses: actions/checkout@v3
        if: github.event.inputs.git_ref == ''
      - name: 'Cloning repository (${{ github.event.inputs.git_ref }})'
        uses: actions/checkout@v3
        if: github.event.inputs.git_ref != ''
        with:
          ref: '${{ github.event.inputs.git_ref }}'

      - name: Extracting metadata from a cloned repository
        id: get-cloned
        run: |-
          echo "::set-output name=SHA::$(git log -1 --format='%H')"
          echo "::set-output name=REF::$(git symbolic-ref HEAD 2>/dev/null)"

      - name: Download artifact(s)
        id: download-artifact
        uses: konturio/action-download-artifact@v2
        with:
          workflow: main.yml
          workflow_conclusion: success
          commit: '${{steps.get-cloned.outputs.SHA}}'
          name: helm-chart-with-actual-project-version

      - name: Installing kubectl
        run: |-
          set -e
          curl -sLO https://dl.k8s.io/release/v1.23.10/bin/linux/amd64/kubectl
          curl -sLO "https://dl.k8s.io/v1.23.10/bin/linux/amd64/kubectl.sha256"
          echo "$(cat kubectl.sha256)  kubectl" | sha256sum --check
          sudo install -o root -g root -m 0755 kubectl $(which kubectl)
          rm -f kubectl.sha256

      - name: deploy-k8s-dev
        if: "'deploy-k8s-dev' == github.event.inputs.deployment_target"
        env:
          CERT_AUTH: ${{ secrets.K8S_CERT_AUTH }}
          CLIENT_CERT: ${{ secrets.K8S_CLIENT_CERT_DEV }}
          CLIENT_KEY: ${{ secrets.K8S_CLIENT_KEY_DEV }}
          STAGE: dev
        run: external/helm/insights-api/install_upgrade.sh

      - name: deploy-k8s-test
        if: "'deploy-k8s-test' == github.event.inputs.deployment_target"
        env:
          CERT_AUTH: ${{ secrets.K8S_CERT_AUTH }}
          CLIENT_CERT: ${{ secrets.K8S_CLIENT_CERT_TEST }}
          CLIENT_KEY: ${{ secrets.K8S_CLIENT_KEY_TEST }}
          STAGE: test
        run: external/helm/insights-api/install_upgrade.sh

      - name: deploy-k8s-prod
        if: "'deploy-k8s-prod' == github.event.inputs.deployment_target"
        env:
          ALLOWED_REFS_PCRE: /^refs\/heads\/release-.*/
          CERT_AUTH: ${{ secrets.K8S_CERT_AUTH }}
          CLIENT_CERT: ${{ secrets.K8S_CLIENT_CERT_PROD }}
          CLIENT_KEY: ${{ secrets.K8S_CLIENT_KEY_PROD }}
          STAGE: prod
        run: |-
          if [[ -z "${{steps.get-cloned.outputs.REF}}" ]]; then
            echo "::error file=${{github.event.workflow}}::${{github.event.inputs.deployment_target}} refuses to deploy from a non-symbolic ref (commit ${{steps.get-cloned.outputs.SHA}})"
            exit 1
          fi
          if [[ -z $(echo '${{steps.get-cloned.outputs.REF}}' | perl -ne "print if $ALLOWED_REFS_PCRE") ]]; then
            echo "::error file=${{github.event.workflow}}::${{github.event.inputs.deployment_target}} refuses to deploy from '${{steps.get-cloned.outputs.REF}}'"
            exit 1
          fi

          external/helm/insights-api/install_upgrade.sh
