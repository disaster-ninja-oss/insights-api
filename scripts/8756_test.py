import psycopg2
import sys
import time
from contextlib import closing
from datetime import datetime

file_output = open(sys.argv[1], "a")
with closing(psycopg2.connect(dbname='population-api', user='user',
                              password='password', host='localhost', port=5432)) as conn:
    with conn.cursor() as cursor:
        for i in range(700):
            time.sleep(3)
            start = datetime.now()
            cursor.execute("""with validated_input as (
            select map_to_geometry_obj('{"type":"GeometryCollection","geometries":[{"type":"Polygon","coordinates":[[[148.237,-6.598],[148.236,-6.567],[148.235,-6.535],[148.232,-6.504],[148.228,-6.473],[148.223,-6.442],[148.217,-6.411],[148.21,-6.38],[148.202,-6.35],[148.193,-6.32],[148.182,-6.29],[148.171,-6.261],[148.159,-6.232],[148.145,-6.203],[148.131,-6.175],[148.116,-6.148],[148.099,-6.121],[148.082,-6.094],[148.064,-6.069],[148.045,-6.044],[148.025,-6.019],[148.004,-5.995],[147.982,-5.972],[147.96,-5.95],[147.937,-5.929],[147.913,-5.908],[147.888,-5.888],[147.863,-5.869],[147.837,-5.851],[147.811,-5.834],[147.784,-5.818],[147.756,-5.803],[147.728,-5.788],[147.699,-5.775],[147.67,-5.763],[147.64,-5.752],[147.61,-5.741],[147.58,-5.732],[147.55,-5.724],[147.519,-5.717],[147.488,-5.711],[147.456,-5.706],[147.425,-5.702],[147.393,-5.699],[147.362,-5.698],[147.33,-5.697],[147.298,-5.698],[147.267,-5.699],[147.235,-5.702],[147.204,-5.706],[147.173,-5.711],[147.142,-5.717],[147.111,-5.724],[147.08,-5.732],[147.05,-5.741],[147.02,-5.752],[146.99,-5.763],[146.961,-5.775],[146.933,-5.788],[146.904,-5.803],[146.877,-5.818],[146.85,-5.834],[146.823,-5.851],[146.797,-5.869],[146.772,-5.888],[146.747,-5.908],[146.723,-5.929],[146.7,-5.95],[146.678,-5.972],[146.656,-5.995],[146.635,-6.019],[146.615,-6.044],[146.596,-6.069],[146.578,-6.094],[146.561,-6.121],[146.545,-6.148],[146.529,-6.175],[146.515,-6.203],[146.502,-6.232],[146.489,-6.261],[146.478,-6.29],[146.468,-6.32],[146.458,-6.35],[146.45,-6.38],[146.443,-6.411],[146.437,-6.442],[146.432,-6.473],[146.428,-6.504],[146.425,-6.535],[146.424,-6.567],[146.423,-6.598],[146.424,-6.63],[146.425,-6.661],[146.428,-6.692],[146.432,-6.724],[146.437,-6.755],[146.443,-6.786],[146.45,-6.816],[146.458,-6.847],[146.468,-6.877],[146.478,-6.906],[146.489,-6.936],[146.502,-6.965],[146.515,-6.993],[146.529,-7.021],[146.545,-7.049],[146.561,-7.076],[146.578,-7.102],[146.596,-7.128],[146.615,-7.153],[146.635,-7.177],[146.656,-7.201],[146.678,-7.224],[146.7,-7.246],[146.723,-7.268],[146.747,-7.288],[146.772,-7.308],[146.797,-7.327],[146.823,-7.345],[146.85,-7.362],[146.877,-7.378],[146.904,-7.394],[146.933,-7.408],[146.961,-7.421],[146.99,-7.434],[147.02,-7.445],[147.05,-7.455],[147.08,-7.464],[147.111,-7.472],[147.142,-7.479],[147.173,-7.485],[147.204,-7.49],[147.235,-7.494],[147.267,-7.497],[147.298,-7.499],[147.33,-7.499],[147.362,-7.499],[147.393,-7.497],[147.425,-7.494],[147.456,-7.49],[147.488,-7.485],[147.519,-7.479],[147.55,-7.472],[147.58,-7.464],[147.61,-7.455],[147.64,-7.445],[147.67,-7.434],[147.699,-7.421],[147.728,-7.408],[147.756,-7.394],[147.784,-7.378],[147.811,-7.362],[147.837,-7.345],[147.863,-7.327],[147.888,-7.308],[147.913,-7.288],[147.937,-7.268],[147.96,-7.246],[147.982,-7.224],[148.004,-7.201],[148.025,-7.177],[148.045,-7.153],[148.064,-7.128],[148.082,-7.102],[148.099,-7.076],[148.116,-7.049],[148.131,-7.021],[148.145,-6.993],[148.159,-6.965],[148.171,-6.936],[148.182,-6.906],[148.193,-6.877],[148.202,-6.847],[148.21,-6.816],[148.217,-6.786],[148.223,-6.755],[148.228,-6.724],[148.232,-6.692],[148.235,-6.661],[148.236,-6.63],[148.237,-6.598],[148.237,-6.598]]]}]}') geom
            ),
            stat_area as (
                select distinct on (h.h3) h.*
            from (
                select ST_Subdivide(v.geom, 30) geom
            from validated_input v
            ) p
            cross join
            lateral (
                select h3,
                       population,
                       populated_area_km2,
                       count,
                       building_count,
                       highway_length,
                       industrial_area,
                       wildfires,
                       volcanos_count,
                       forest
            from stat_h3 sh
            where ST_Intersects(sh.geom, p.geom)
                  and sh.zoom = 8
            order by h3
            ) h
            )
            select sum(populated_area_km2) as populatedAreaKm2, sum(industrial_area) as industrialAreaKm2, sum(forest) as forest,
            sum(volcanos_count) as volcanoesCount, max(wildfires) as hotspotDaysPerYearMax, (sum(populated_area_km2 * (1 - sign(count)))/sum(populated_area_km2) 
            filter (where populated_area_km2 != 0)) * 100 as osmGapsPercentage from stat_area st""")
            for row in cursor:
                print('Start time: {}'.format(start), file=file_output)
                print(row, file=file_output)
                print('Lead time: {}'.format(datetime.now()-start), file=file_output)
        file_output.close()